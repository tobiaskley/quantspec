// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// computeCoherency
ComplexVector computeCoherency(ComplexVector V, NumericVector d1, NumericVector d2);
RcppExport SEXP _quantspec_computeCoherency(SEXP VSEXP, SEXP d1SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d2(d2SEXP);
    rcpp_result_gen = Rcpp::wrap(computeCoherency(V, d1, d2));
    return rcpp_result_gen;
END_RCPP
}
// computeSdNaive
ComplexVector computeSdNaive(ComplexVector V, NumericVector W);
RcppExport SEXP _quantspec_computeSdNaive(SEXP VSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSdNaive(V, W));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quantspec_computeCoherency", (DL_FUNC) &_quantspec_computeCoherency, 3},
    {"_quantspec_computeSdNaive", (DL_FUNC) &_quantspec_computeSdNaive, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_quantspec(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
